#!/bin/bash

set -e

COMMAND_LINE=()

# COMMAND_LINE+=('--watch')
# COMMAND_LINE+=('.')

COMMAND_LINE+=('--ext')
COMMAND_LINE+=('js,jsx,ts,tsx,coffee,json,yml,yaml')

# COMMAND_LINE+=('--ignore')
# COMMAND_LINE+=('**/build/**')


function get_package_location {
  npx lerna list \
    --loglevel=error \
    --json \
    --all \
    --scope "$1" \
  | npx json -a location
}


IGNORE_PACKAGES=(
  "$(get_package_location @42technologies/monomon)"
)
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  --ignorePackage)
    IGNORE_PACKAGES+=("node_modules/$2")
    shift # past argument
    shift # past value
    ;;
  *)                   # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift              # past argument
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


# Query a value from a package.json file
function query_package {
  local query="$1"
  local pkg_filepath="$2"

  # If the package.json doesn't exist, then exit early
  [[ ! -f "$pkg_filepath" ]] && return

  npx json "$query" < "$pkg_filepath" || true
}


function get_build_dir {
  local package_dir="${1:-.}";
  local package_file="$package_dir/package.json";
  local builddir;

  builddir=$(query_package directories.build "$package_file")
  [[ -z "$builddir" ]] && return;

  builddir="$package_dir/$builddir"
  echo "$builddir"
}


function get_dependency_locations {
  local current_scope;
  current_scope="$(query_package name ./package.json)"

  [[ -z "$current_scope" ]] && return;

  npx lerna list \
    --include-dependencies \
    --loglevel=error \
    --json \
    --all \
    --scope "$current_scope" \
  | npx json -c "this.name != '$current_scope'" -a location
}

function get_local_package_watch_dir {
  local package_dir="$1";
  local watchdir;

  # 1. try 'directories.build'
  watchdir=$(get_build_dir "$package_dir")

  # 2. try directory of 'main'
  if [[ -z "$watchdir" ]] || [[ ! -d "$watchdir" ]]; then
    package_main=$(query_package .main "$pkg_filepath");
    if [[ -n "$package_main" ]]; then
      package_main="$package_dir/$package_main";
      watchdir="$(dirname "$package_main")";
    fi
  fi

  # 3. use the full package.json directory
  if [[ -z "$watchdir" ]] || [[ ! -d "$watchdir" ]]; then
    watchdir=$(realpath "$package_dir")
  fi

  echo "$watchdir"
}

while read -r package_dir; do

  # trick from https://stackoverflow.com/a/15394738/1234037
  # shellcheck disable=SC2199,SC2076
  if [[ " ${IGNORE_PACKAGES[@]} " =~ " ${package_dir} " ]]; then
    continue
  fi

  watchdir=$(get_local_package_watch_dir "$package_dir")
  [[ -z "$watchdir" ]] && continue;

  COMMAND_LINE+=("--watch")
  COMMAND_LINE+=("$watchdir")

  COMMAND_LINE+=('--ignore')
  COMMAND_LINE+=("$package_dir/node_modules/**/*")

done < <(get_dependency_locations)

echo "npx nodemon" "${COMMAND_LINE[@]}" "$@"
exec nodemon "${COMMAND_LINE[@]}" "$@"
